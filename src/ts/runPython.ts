import { exec } from 'child_process';
import { generalThresholds, OpenPose, epochLength } from './constants';
import { IConfigStore, getConfigStore } from './configstore';
// Executes the Python script or exe generated by the Python script with flags containing
// the videoPath, savePath, epochLength, threshold, and whether to run OpenPose or not.

const defaultOpenPoseSettings = {
	openpose: 1,
	epochLength: epochLength,
	headThreshold: generalThresholds.Head,
	armsThreshold: generalThresholds.Arms,
	legsThreshold: generalThresholds.Legs,
	feetThreshold: generalThresholds.Feet,
};

function executeProcessingScript(options: any): Promise<any> {
	let configStore: IConfigStore = getConfigStore();
	const videoPath = configStore.get('videoPath');
	const savePath = configStore.get('savePath');
	let { openpose, epochLength, headThreshold, armsThreshold, legsThreshold, feetThreshold } = options;
	return new Promise((resolve, reject) => {
		exec(
			`processing_script.exe "${videoPath}" "${savePath}" ${openpose} ${headThreshold} ${armsThreshold} ${legsThreshold} ${feetThreshold} ${epochLength}`,
			(err, data) => {
				if (err) {
					console.error(err);
					resolve(null);
				} else {
					resolve(data);
				}
			}
		);
	});
}
export function processVideoWithoutOpenPose(options: any): Promise<any> {
	let optionsWithOpenPoseFlag = { ...options, openpose: OpenPose.NONE };
	return executeProcessingScript(optionsWithOpenPoseFlag);
}

export function processVideoWithOpenPoseGPU(): Promise<any> {
	let options = { ...defaultOpenPoseSettings, openpose: OpenPose.GPU };
	return executeProcessingScript(options);
}

export function processVideoWithOpenPoseCPU(): Promise<any> {
	let options = { ...defaultOpenPoseSettings };
	return executeProcessingScript(options);
}

export function deidentifyVideo() {
	let configStore: IConfigStore = getConfigStore();
	let videoPath = configStore.get('videoPath');
	let skeletonPath = configStore.get('skeletonPath');
	let savePath = configStore.get('savePath');
	return new Promise((resolve, reject) => {
		exec(`deidentification.exe "${videoPath}" "${skeletonPath}" "${savePath}"`, (err, data) => {
			if (err) {
				reject();
			} else {
				resolve(data);
			}
		});
	});
}
